// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category{
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  videos  VideosInCategories []
  user UsersInCategories[]
}

model VerificationToken {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

model Video {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  videoUrl      String @unique
  thumbnailUrl  String
  categories    VideosInCategories[]
  duration      Int
  playlist      VideosInPlaylists[]
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playlists  Playlist[]
  favoriteCategories UsersInCategories[]
  emailVerified DateTime?
  accounts Account[]
  role String
}


model Playlist {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @db.ObjectId
  owner    User     @relation(fields: [userId], references: [id])
  name    String
  videos  VideosInPlaylists[]
  isPublic Boolean
}

model VideosInPlaylists{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  video       Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     String @db.ObjectId
  playlist    Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId  String @db.ObjectId
  assignedAt  DateTime @default(now())

  @@unique([videoId, playlistId])
}

model UsersInCategories{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String @db.ObjectId
  category    Category @relation(fields:[categoryId], references: [id], onDelete: Cascade)
  categoryId  String @db.ObjectId
  @@unique([userId, categoryId])
}

model VideosInCategories{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  video       Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     String @db.ObjectId
  category    Category @relation(fields:[categoryId], references: [id], onDelete: Cascade)
  categoryId  String @db.ObjectId
  @@unique([videoId, categoryId])
}

